

_________________________________________________________________________________________________

<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
    stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
    class="lucide lucide-volume-off-icon lucide-volume-off">
    <path d="M16 9a5 5 0 0 1 .95 2.293"/
    ><path d="M19.364 5.636a9 9 0 0 1 1.889 9.96"/><path d="m2 2 20 20"/
    ><path d="m7 7-.587.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298V11"/><path d="M9.828 4.172A.686.686 0 0 1 11 4.657v.686"/>
</svg>






_________________________________________________________________________________________________

Ancien script affichage ne mettant pas en cache fetch json


ancien script :

    // Fonction avec fecth pour charger et afficher les webtoons depuis le JSON 
function loadWebtoonsFromJson(jsonFile) {
    fetch(jsonFile)
        .then(response => response.json())
        .then(data => {
            data.categories.forEach(category => {
                // Vérification du nom de la catégorie
                console.log("Chargement de la catégorie :", category.name);
                
                // Trouver le conteneur correspondant à la catégorie
                const container = document.getElementById(
                    category.name.toLowerCase()
                        .normalize("NFD")
                        .replace(/[\u0300-\u036f]/g, "")
                        .replace(/\s+/g, '-')
                );

                // Vérifie si le conteneur existe
                if (container) {
                    console.log("Conteneur trouvé pour la catégorie :", category.name);
                    
                    // Ajouter les webtoons de cette catégorie au conteneur
                    category.webtoons.forEach(webtoon => {
                        const link = document.createElement('a');
                        link.href = `#webtoon-${webtoon.title.replace(/\s+/g, '-').toLowerCase()}-details`;
                        const img = document.createElement('img');
                        img.src = webtoon.image;
                        if (webtoon.loading) {
                            img.loading = webtoon.loading;
                        }
                        img.alt = webtoon.alt;
                        
                        link.appendChild(img);
                        container.appendChild(link);

                        link.addEventListener('click', function (event) {
                            event.preventDefault();
                            const targetID = this.getAttribute('href').substring(1);
                            const targetDetail = document.getElementById(targetID);
                            if (targetDetail) {
                                targetDetail.style.display = 'block';
                            }
                        });
                    });
                } else {
                    console.error("Erreur : conteneur introuvable pour la catégorie :", category.name);
                }
            });
        })
        .catch(error => console.error('Erreur lors du chargement du JSON :', error));
}



______________________________________________________________

TIERLIST.JS :

// Attend que tout le contenu HTML soit entièrement chargé avant d'exécuter le JS
document.addEventListener('DOMContentLoaded', function () {
    const webtoonLinks = document.querySelectorAll('.tier-grid a');
    const tierContainer = document.getElementById("intermediaires");

    
    // Ouvre un pop-up lorsque l'image est cliquée
    webtoonLinks.forEach(link => {
        link.addEventListener('click', function (event) {
            event.preventDefault();
            const targetID = this.getAttribute('href').substring(1);
            const targetDetail = document.getElementById(targetID);
            if (targetDetail) {
                targetDetail.style.display = 'block';
            }
        });
    });


/*
fetch('RESSOURCES/data-json/all.json')
.then(response => {
    if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
})
.then(data => {
    console.log('Données JSON chargées :', data);
})
.catch(error => console.error('Erreur lors du chargement du JSON :', error));
*/

function loadWebtoonsFromJson(jsonFile) {
    fetch(`${jsonFile}?v=${Date.now()}`)  // Ajout du paramètre pour éviter le cache
        .then(response => response.json())
        .then(data => {
            data.categories.forEach(category => {
                console.log("Chargement de la catégorie :", category.name);
                
                const container = document.getElementById(
                    category.name.toLowerCase()
                        .normalize("NFD")
                        .replace(/[\u0300-\u036f]/g, "")
                        .replace(/\s+/g, '-')
                );

                if (container) {
                    console.log("Conteneur trouvé pour la catégorie :", category.name);
                    
                    category.webtoons.forEach(webtoon => {
                        const link = document.createElement('a');
                        link.href = `#webtoon-${webtoon.title.replace(/\s+/g, '-').toLowerCase()}-details`;
                        const img = document.createElement('img');
                        img.src = webtoon.image;
                        if (webtoon.loading) {
                            img.loading = webtoon.loading;
                        }
                        img.alt = webtoon.alt;
                        
                        link.appendChild(img);
                        container.appendChild(link);

                        link.addEventListener('click', function (event) {
                            event.preventDefault();
                            const targetID = this.getAttribute('href').substring(1);
                            const targetDetail = document.getElementById(targetID);
                            if (targetDetail) {
                                targetDetail.style.display = 'block';

                                // Récupérer la croix de fermeture
                                const closePopup = targetDetail.querySelector('.close-popup');
                                // Ajouter un événement de clic pour fermer le pop-up
                                closePopup.onclick = function() {
                                    targetDetail.style.display = 'none'; // Fermer le pop-up
                                };
                            }
                        });
                    });
                } else {
                    console.error("Erreur : conteneur introuvable pour la catégorie :", category.name);
                }
            });
        })
        .catch(error => console.error('Erreur lors du chargement du JSON :', error));
}






______________________________________________________________

POUR guessthewebtoon.js au càs-où le fichier ne se charge toujours pas sur GitHub

// -> Remplace ta ligne const filePath = `...` par :

// normaliser difficulty
const diffKey = String(difficulty).toLowerCase(); // "Facile" -> "facile"

// detecter si on est sur github pages et récupérer le nom du repo (1er segment du pathname)
let repoBase = '';
if (location.hostname.includes('github.io')) {
  // location.pathname like "/Site-Webtoons/..." -> on prend le 1er segment après '/'
  const parts = location.pathname.split('/').filter(Boolean); // enlève vides
  if (parts.length > 0) {
    repoBase = '/' + parts[0]; // -> "/Site-Webtoons"
  }
}

// Construire le chemin final
const filePath = `${repoBase}/RESSOURCES/json-guessthewebtoon/cover-${diffKey}.json`;
// Exemple sur GH Pages: "/Site-Webtoons/RESSOURCES/json-guessthewebtoon/cover-facile.json"
// Exemple local (repoBase=''): "/RESSOURCES/json-guessthewebtoon/cover-facile.json"
// Si tu préfères chemin relatif local (sans slash initial), adapte repoBase => '' ou '.' selon ta structure




______________________________________________________________

Ancien script python generate-all-json

import os
import json

# Dossier source des images
BASE_DIR = "RESSOURCES/img-guessthewebtoon/cover"
# Dossier de sortie pour les JSON
OUTPUT_DIR = "RESSOURCES/data-json/guess-webtoon-py"

# Crée le dossier de sortie s'il n'existe pas
os.makedirs(OUTPUT_DIR, exist_ok=True)

# Parcourt tous les dossiers dans le dossier "cover"
for subfolder in os.listdir(BASE_DIR):
    subfolder_path = os.path.join(BASE_DIR, subfolder)

    if os.path.isdir(subfolder_path):
        image_list = []

        for filename in os.listdir(subfolder_path):
            if filename.lower().endswith((".png", ".jpg", ".jpeg", ".webp", ".avif")):
                image_path = os.path.join(subfolder_path, filename)
                image_name = os.path.splitext(filename)[0]

                image_data = {
                    "name": image_name,
                    "image": image_path.replace("\\", "/")  # Pour que le chemin fonctionne dans les URLs
                }

                image_list.append(image_data)

        # Crée le fichier JSON correspondant au sous-dossier
        json_filename = f"cover-{subfolder}.json"
        json_path = os.path.join(OUTPUT_DIR, json_filename)

        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(image_list, f, indent=4, ensure_ascii=False)

        print(f"✅ Fichier JSON généré : {json_filename} ({len(image_list)} images)")

# Commande : python generate-all-json.py



ANCIEN guessthewebtoon.js :

    async function startGuessTheWebtoonGame(difficulty = 'facile') {
        const diffKey = String(difficulty).toLowerCase();
        const filePath = `../RESSOURCES/data-json/guess-webtoon-py/cover-${diffKey}.json`;

        if (document.querySelector('.gtw-overlay-game')) {
            console.warn('Le jeu est déjà en cours.');
            return;
        }

        // Chargement JSON
        let data;
        try {
            const res = await fetch(filePath);
            if (!res.ok) throw new Error(`Erreur HTTP ${res.status} - ${res.statusText}`);
            data = await res.json();
        } catch (err) {
            console.error('Erreur de chargement du JSON :', err);
            alert("Impossible de charger les questions pour cette catégorie. Vérifie le chemin du JSON.");
            return;
        }

        if (!Array.isArray(data) || data.length < 1) {
            console.error('JSON vide ou mal formé');
            alert('Pas de données disponibles pour cette catégorie.');
            return;
        }

        // État du jeu
        const gameState = {
            difficulty: diffKey,
            data: data,
            remaining: Array.from({ length: data.length }, (_, i) => i),
            total: Math.min(10, data.length),
            current: 1,
            streak: 0,
            maxStreak: 0,
            correctCount: 0,
            answered: false
        };