

function startGuessTheWebtoon() {
    const gameContainer = document.getElementById('memory-game');
    gameContainer.classList.add('hidden');
    gameContainer.classList.remove('fade-in');
    document.getElementById('memory-difficulty-selector').classList.add('hidden');
    document.getElementById('memory-stats').classList.add('hidden');
    document.getElementById('leaderboard-section').classList.add('hidden');

        // Si la fonction existe (par s√©curit√©), on stoppe les sons du Memory
    if (typeof stopAllMemorySounds === 'function') {
        stopAllMemorySounds();
    }

        // Arr√™t du chrono / compte √† rebours
    if (typeof stopAllMemoryTimers === 'function') {
        stopAllMemoryTimers();
    } else {
        // S√©curit√© si la fonction n‚Äôest pas encore charg√©e
        if (countdownInterval) {
            clearInterval(countdownInterval);
            countdownInterval = null;
        }
        if (timerInterval) {
            clearInterval(timerInterval);
            timerInterval = null;
        }
        document.getElementById('memory-countdown').classList.add('hidden');
    }
}

window.startGuessTheWebtoon = startGuessTheWebtoon;


// Accord√©ons principaux
const accordions = document.querySelectorAll('.accordion');
accordions.forEach((acc) => {
    // Ajout de la fl√®che initiale
    acc.textContent = `‚ñ∏ ${acc.textContent.trim()}`;

    acc.addEventListener('click', () => {
        acc.classList.toggle('active');
        const panel = acc.nextElementSibling;
        const isOpen = panel.style.display === 'flex';

        panel.style.display = isOpen ? 'none' : 'flex';
        acc.textContent = isOpen ? `‚ñ∏ ${acc.textContent.slice(2).trim()}` : `‚ñæ ${acc.textContent.slice(2).trim()}`;
    });
});

// Sous-accord√©ons
const subAccordions = document.querySelectorAll('.sub-accordion');

subAccordions.forEach((accordion) => {
  accordion.addEventListener('click', () => {
    accordion.classList.toggle('active');
    const panel = accordion.nextElementSibling;
    if (panel) {
      panel.style.display = panel.style.display === 'block' ? 'none' : 'block';
    }
  });
});


// Commencer le jeu
document.addEventListener('DOMContentLoaded', () => {
    console.log("Script charg√© ‚úÖ");

    // Initialise la pop-up (et sa fonction globale)
    initGuessTheWebtoonPopup();

    document.querySelectorAll('.scroll-item').forEach(item => {
        item.addEventListener('click', () => {
            console.log("Tu as cliqu√© sur :", item.textContent.trim());

            // Appelle ici ta fonction perso
            handleScrollItemClick(item);
        });
    });

    function handleScrollItemClick(el) {
        const difficulty = el.textContent.trim(); // On suppose que le texte contient la difficult√©
        console.log("Lancement du jeu avec difficult√© :", difficulty);
        showGuessTheWebtoonPopup(difficulty); // Appelle la fonction globale cr√©√©e
    }
});



function initGuessTheWebtoonPopup() {
    const popupSound = new Audio('popup-sound.mp3');

    // On d√©clare la fonction globale ici
    window.showGuessTheWebtoonPopup = function(difficulty = "Facile") {
        // Ne cr√©e pas la pop-up si elle existe d√©j√†
        if (document.querySelector('.gtw-popup')) return;

        // Cr√©er l‚Äôoverlay
        const overlay = document.createElement('div');
        overlay.className = 'gtw-overlay';

        // Cr√©er la pop-up principale
        const popup = document.createElement('div');
        popup.className = 'gtw-popup';

        // En-t√™te
        const header = document.createElement('div');
        header.className = 'gtw-header';
        header.innerHTML = `
            <h2>Devine le Webtoon</h2>
            <span class="gtw-close">&times;</span>
        `;
        popup.appendChild(header);

        // Difficult√©
        const diffDisplay = document.createElement('div');
        diffDisplay.className = `gtw-difficulty gtw-${difficulty.toLowerCase()}`;
        diffDisplay.textContent = `Difficult√© : ${difficulty}`;
        popup.appendChild(diffDisplay);

        // Bloc consigne avec mascotte
        const instructions = document.createElement('div');
        instructions.className = 'gtw-instructions';
        instructions.innerHTML = `
            <img src="../RESSOURCES/icons/icon3-consigne.jpg" alt="Mascotte" class="gtw-mascotte" />
            <div class="gtw-text">
                <strong>Pr√™t √† tester tes connaissances ?</strong><br>
                Tu auras <strong>15s</strong> pour retrouver le nom du <strong>webtoon</strong> correspondant √† l'image parmi 4 propositions.
            </div>
        `;
        popup.appendChild(instructions);

        // Exemple visuel
        const example = document.createElement('div');
        example.className = 'gtw-example';
        example.innerHTML = `
            <div class="gtw-example-title">Exemple :</div>
            <img src="images/exemple_flou.png" alt="Exemple flou" />
        `;
        popup.appendChild(example);

        // Bouton "JOUER"
        const playButton = document.createElement('button');
        playButton.className = 'gtw-start-button';
        playButton.textContent = 'JOUER';
        popup.appendChild(playButton);

        // Ajout √† la page
        overlay.appendChild(popup);
        document.body.appendChild(overlay);

        // Son
        popupSound.play().catch(() => {});

        // Animation d‚Äôapparition
        setTimeout(() => popup.classList.add('gtw-visible'), 10);

        // Fermeture
        overlay.querySelector('.gtw-close').addEventListener('click', () => {
            overlay.remove();
        });

        // D√©marrage du jeu
        playButton.addEventListener('click', () => {
            overlay.remove();
            startGuessTheWebtoonGame();     // Fonction lan√ßant le vrai jeu
        });
    };
}



function startGuessTheWebtoonGame() {
    console.log("Le jeu Guess the Webtoon commence ici !");
}




/*
prochaines √©tapes :
- Designer mon menu de jeu, juste avant de lancer une partie
    |-->    Prompt Chatgpt : 
- Son : quand le joueur clique sur une cat√©gorie, et quand il clique sur "JOUER"


Faire un toggle pour l'apparition de l'enti√®ret√© du jeu "Guess The Webtoon"

Autour du plateau de jeu :
- Prendre une mascotte (pr√©f√©rence barbare Bjorn fisl de Yandel), et d√©terminer en image √† l'aide de l'IA ses diff√©rentes expressions
- Motifs autour du plateau (bulles, effets de papier, cadres illustr√©s)




PROMPT !!! (utiliser "raisonner"):

Je souhaite cr√©er la seconde page d'un jeu en ligne appel√© "Devine le Webtoon", qui s'affiche apr√®s que l'utilisateur ait cliqu√© sur le bouton "JOUER" dans une premi√®re pop-up d'introduction.

Cette nouvelle page (toujours en pop-up) est l'espace de jeu principal, et doit reprendre le m√™me style premium que la premi√®re :

Design noble et raffin√© (mat√©riaux luxueux, touches dor√©es)

Arri√®re-plan mystique

Animations subtiles, ombrages doux

Feedback visuels et sonores "haut de gamme"

Responsive et moderne

‚úÖ √Ä inclure dans cette interface de jeu :
üî∑ En-t√™te (header) :
Un titre principal ("Devine le Webtoon")

Une croix de fermeture √† droite

La difficult√© s√©lectionn√©e (ex : "Facile", "Moyen", etc.)

üî∑ Scoreboard :
Barre de progression (repr√©sentant l‚Äôavanc√©e sur 10 questions)

Un texte dynamique de type : "Question 3/10"

Un winstreak indicator avec un √©moji üî• suivi de : "Streak : x3"

üî∑ Corps du jeu :
Une image myst√®re (repr√©sentant le Webtoon √† deviner)

Une liste de choix (QCM) sous forme de boutons ou √©l√©ments interactifs

Un bouton "Valider" en bas

üî∑ Feedback joueur :
Message anim√© :

Bonne r√©ponse ‚Üí "üéâ Bonne r√©ponse !"

Mauvaise r√©ponse ‚Üí "‚ùå Ce n‚Äôest pas √ßa..."

Petites animations du fond ou de l‚Äô√©l√©ment (ex : vibration en cas d‚Äôerreur)

Effets sonores pour les r√©ponses correctes / incorrectes

üèÅ √âcran final apr√®s 10 questions :
R√©sum√© des r√©sultats :

Nombre de Webtoons devin√©s vs rat√©s

Record de winstreak pendant cette partie

Message de fin personnalis√© :

10/10 √† 6/10 ‚Üí F√©licitations ("Tu es un ma√Ætre des Webtoons !")

5/10 ‚Üí Message neutre

4/10 √† 1/10 ‚Üí Message de d√©ception douce

0/10 ‚Üí Message de grosse d√©ception (humoristique ou piquant)

Mascotte al√©atoire selon le score (choisie parmi 4 cat√©gories)

Boutons :

"Rejouer"

"Partager mon score"

üì¶ Bonus :
L‚Äôensemble doit rester coh√©rent avec la pop-up initiale, mais s‚Äôadapter √† ce nouveau contexte interactif de quiz. Les transitions doivent √™tre douces, √©l√©gantes, premium.

üé® Tu peux te laisser une part de cr√©ativit√© pour am√©liorer l'interface ou l'exp√©rience si certaines id√©es te viennent.

‚öôÔ∏è Enfin, ce prompt concerne uniquement la partie design et affichage (HTML/CSS/JS c√¥t√© front). La logique de gestion des donn√©es (comme le JSON des questions, le syst√®me de validation, ou le compteur de r√©ponses) sera int√©gr√©e plus tard : tu peux donc utiliser des placeholders ({{question}}, {{choices}}, etc.) sans probl√®me.

Et enfin, apr√®s avoir √©crit ton prompt, j'aimerais te poser une question : l√† ce que ce prompt va faire, c'est √©ssentiellement s'occuper de l'affichage, cet aspect design. Mais il faut qu'il y ait un syst√®me pour g√©rer le json, etc...Je veux juste savoir si cela posera probl√®me lors de la cr√©ation de l'affichage ?




- Prendre le json correspondant √† la cat√©gorie, et pour les autres r√©ponses "fausses". Pour la r√©ponse "bonne", il faudra utiliser le chemin du nom du fichier, qui comprend directement le nom du webtoon.
- Ma m√©thode est-elle bonne, ou y a t il une m√©thode plus simple et efficace ?

AUTRE :
- faire une cat√©gorie "eyes" et "personnage flout√© ou couverture flout√©e"
*/